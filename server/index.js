
////*******In package.json===> index.js..... defined... */


//   ///express server/// ...  //
// Here we want to run the "expresss server" as we previously run the "reacte". But we don't have "start" script here. so we add it.
// So, for that we can enter two vslues (i)"node index.js" and  (ii)"nodemon index.js" under "script" 
// By help of "node", changes can't detected automatically. 
            //We need to manually "stop" the server and then we need to "run" that server again for changes.
// where as that can't be the case for the "nodemon". easily changes can be reflected(by stoping and restarting server automatically). 


import express from 'express';

//\\ import dotenv...
import dotenv from 'dotenv';

//\\\\\ import connection .... Here in case of "backend" there is must to write ".js" as the extention 
import Connection from './database/connect-db.js';

///\\\ import the DefaultData onto the server...
import DefaultData from './mongodb-default-data-load.js';

//import Router...
import router from './routes/route.js';

//import cors for CORS error.. 
import cors from 'cors';

//\import body-parser for dealing with post-api...
import bodyParser from 'body-parser';

//[p]- unique - id 
import {v4 as uuid} from 'uuid';







// Initialize "express" as function by use of "app" variable
const app = express();  

// We need to intialize "dotenv" by use of ".config"......
dotenv.config();

//Then we need to use "cors" on "express" by use of "app"
app.use(cors());


// Post-api's request/body comes in the "jeson" formate which can be enable by giving argument "ectended:true"
// also we can enable URL from the bodyParser... But why we need URl to paaon with bodyParser? 
//      While we entry any details in the google-search-bar, Blank space has been filled-up by random numbers.
//      But in actual we need to pass on the perticular URL many times.... so we pass it through bodyParser...
app.use(bodyParser.json({ extended:true}));
app.use(bodyParser.urlencoded({ extended:true }));
//     After doing this we can see "body's" details in terminal as we used comand "console.log(request.body)" 
//                          on click of "sign-up" ==> from "Continue" bar.... 
//     Now, rather going for printing directly on terminal we validate the data...



// We need to assign router into express and for that, we can also do "empty"-route by "/" 
//                  and also "router"-variable also asssigned to that, so it'll go to "route.js" to find path..
app.use('/',router);   




//1.PORT on which we want to run the surver 
const PORT = 8000;

//2.Call_Back Function ==> If user wants to Perform any Action after running the server then user can do it in the callback_function
// But we don't want to do anything here so we simpally print out "on the Console".....


//\\ by "process" we take out stored values into variables....
const USERNAME = process.env.DB_USERNAME;
const PASSSWORD = process.env.DB_PASSWORD; 


//\\\\\Before making server we are calling "Connection" function
// Connection(); we need to pass on the "USERNAME" & "PASSWORD" variable into "Connection" function...
Connection(USERNAME, PASSSWORD);


// to make express server ==> listen useful ==> takes  Two argumenmts 1) PORT, 2) Call_Back function
app.listen(PORT, () => console.log(`server is running Sucessfully on the PORT no. ${PORT} fine... `) );
//********Cannot GET /******* will be shown in the http://localhost:8000/ as no Api is matched...


// After "Connection" made and "Server" made we call "DefaultData" function to enter data into Mongodb
DefaultData();


///***/ Now what problem happens when rerun the server... 
//      then all default Data go one more time to the Mongodb.... 
//      So for each run that our code will load DafultData into the Database... which we don't want ...
//                                          As we already have the DefaultData into the DataBase...

/// [p]----
export let paytmMerchantkey = process.env.PAYTM_MERCHANT_KEY;
export let paytmParams = {};
paytmParams['MID'] = process.env.PAYTM_MID;
paytmParams['WEBSITE'] = process.env.PAYTM_WEBSITE;
paytmParams['CHANNEL_ID'] = process.env.PAYTM_CHANNEL_ID;
paytmParams['INDUSTRY_TYPE_ID'] = process.env.PAYTM_INDUSTRIAL_TYPE_ID;
paytmParams['ORDER_ID'] = uuid();   //Each order has unique_id =>that can be generated by "npm i uuid"
paytmParams['CUST_ID'] = process.env.PAYTM_CUST_ID;
paytmParams['TXN_AMOUNT'] = '100';  // hard-coring the payment ammount...
paytmParams['CALLBACK_URL'] = 'http://localhost:8000/callback';  // when payment sucessful/fail we need to hit one -"api"..==> with_end_point -->url given...  ===> so we need to make it..
paytmParams['EMAIL'] = 'joshiabhishek590@gmail.com';  
paytmParams['MOBILE_NO'] = '8200313093';



